#ifndef __NDM_SRC_CHARSET_INUIT_H__
#define __NDM_SRC_CHARSET_INUIT_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/VENDORS/APPLE/INUIT.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t INUIT_00000020_000000FF_TO_UNI_[] = {
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
	0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
	0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
	0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
	0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
	0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
	0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0xd800,
	0x1403, 0x1404, 0x1405, 0x1406, 0x140a, 0x140b, 0x1431, 0x1432,
	0x1433, 0x1434, 0x1438, 0x1439, 0x1449, 0x144e, 0x144f, 0x1450,
	0x1451, 0x1455, 0x1456, 0x1466, 0x146d, 0x146e, 0x146f, 0x1470,
	0x1472, 0x1473, 0x1483, 0x148b, 0x148c, 0x148d, 0x148e, 0x1490,
	0x1491, 0x00b0, 0x14a1, 0x14a5, 0x14a6, 0x2022, 0x00b6, 0x14a7,
	0x00ae, 0x00a9, 0x2122, 0x14a8, 0x14aa, 0x14ab, 0x14bb, 0x14c2,
	0x14c3, 0x14c4, 0x14c5, 0x14c7, 0x14c8, 0x14d0, 0x14ef, 0x14f0,
	0x14f1, 0x14f2, 0x14f4, 0x14f5, 0x1505, 0x14d5, 0x14d6, 0x14d7,
	0x14d8, 0x14da, 0x14db, 0x14ea, 0x1528, 0x1529, 0x152a, 0x152b,
	0x152d, 0x2026, 0x00a0, 0x152e, 0x153e, 0x1555, 0x1556, 0x1557,
	0x2013, 0x2014, 0x201c, 0x201d, 0x2018, 0x2019, 0x1558, 0x1559,
	0x155a, 0x155d, 0x1546, 0x1547, 0x1548, 0x1549, 0x154b, 0x154c,
	0x1550, 0x157f, 0x1580, 0x1581, 0x1582, 0x1583, 0x1584, 0x1585,
	0x158f, 0x1590, 0x1591, 0x1592, 0x1593, 0x1594, 0x1595, 0x1671,
	0x1672, 0x1673, 0x1674, 0x1675, 0x1676, 0x1596, 0x15a0, 0x15a1,
	0x15a2, 0x15a3, 0x15a4, 0x15a5, 0x15a6, 0x157c, 0x0141, 0x0142
};

static inline long conv_inuit_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (0x20 <= b0) {
		const uint16_t code =
			INUIT_00000020_000000FF_TO_UNI_[b0 - 0x20];

		/* illegal code for this range */
		if (code == 0xd800) {
			return -1;
		}

		*cp = code;

		return 1;
	}

	return -1;
}

static const uint8_t UNI_00000020_000000B6_TO_INUIT_[] = {
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xa9, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00,
	0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6
};

static const uint8_t UNI_00000141_00000142_TO_INUIT_[] = {
	0xfe, 0xff
};

static const uint8_t UNI_00001403_000014F5_TO_INUIT_[] = {
	0x80, 0x81, 0x82, 0x83, 0x00, 0x00, 0x00, 0x84,
	0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x87,
	0x88, 0x89, 0x00, 0x00, 0x00, 0x8a, 0x8b, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00,
	0x00, 0x00, 0x00, 0x8d, 0x8e, 0x8f, 0x90, 0x00,
	0x00, 0x00, 0x91, 0x92, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x94, 0x95, 0x96, 0x97, 0x00, 0x98,
	0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9b, 0x9c, 0x9d, 0x9e, 0x00, 0x9f, 0xa0, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x00,
	0x00, 0x00, 0xa3, 0xa4, 0xa7, 0xab, 0x00, 0xac,
	0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf,
	0xb0, 0xb1, 0xb2, 0x00, 0xb3, 0xb4, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00,
	0x00, 0x00, 0xbd, 0xbe, 0xbf, 0xc0, 0x00, 0xc1,
	0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3,
	0x00, 0x00, 0x00, 0x00, 0xb6, 0xb7, 0xb8, 0xb9,
	0x00, 0xba, 0xbb
};

static const uint8_t UNI_00001505_000015A6_TO_INUIT_[] = {
	0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xc4, 0xc5, 0xc6, 0xc7, 0x00,
	0xc8, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xda, 0xdb, 0xdc, 0xdd, 0x00, 0xde, 0xdf,
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00,
	0xcd, 0xce, 0xcf, 0xd6, 0xd7, 0xd8, 0x00, 0x00,
	0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd,
	0x00, 0x00, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
	0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed,
	0xee, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
	0xfb, 0xfc
};

static const uint8_t UNI_00001671_00001676_TO_INUIT_[] = {
	0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4
};

static const uint8_t UNI_00002013_00002026_TO_INUIT_[] = {
	0xd0, 0xd1, 0x00, 0x00, 0x00, 0xd4, 0xd5, 0x00,
	0x00, 0xd2, 0xd3, 0x00, 0x00, 0x00, 0x00, 0xa5,
	0x00, 0x00, 0x00, 0xc9
};

static inline long conv_uni_to_inuit_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (0x20 <= cp && cp <= 0xb6) {
		const uint8_t code =
			UNI_00000020_000000B6_TO_INUIT_[cp - 0x20];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x0141 <= cp && cp <= 0x0142) {
		*out =
			UNI_00000141_00000142_TO_INUIT_[cp - 0x0141];

		return 1;
	}

	if (0x1403 <= cp && cp <= 0x14f5) {
		const uint8_t code =
			UNI_00001403_000014F5_TO_INUIT_[cp - 0x1403];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x1505 <= cp && cp <= 0x15a6) {
		const uint8_t code =
			UNI_00001505_000015A6_TO_INUIT_[cp - 0x1505];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x1671 <= cp && cp <= 0x1676) {
		*out =
			UNI_00001671_00001676_TO_INUIT_[cp - 0x1671];

		return 1;
	}

	if (0x2013 <= cp && cp <= 0x2026) {
		const uint8_t code =
			UNI_00002013_00002026_TO_INUIT_[cp - 0x2013];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (cp == 0x2122) {
		*out = 0xaa;

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_INUIT_H__ */
