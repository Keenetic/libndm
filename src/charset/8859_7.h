#ifndef __NDM_SRC_CHARSET_8859_7_H__
#define __NDM_SRC_CHARSET_8859_7_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/ISO8859/8859-7.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t ISO_8859_7_000000A1_000000FE_TO_UNI_[] = {
	0x2018, 0x2019, 0x00a3, 0x20ac, 0x20af, 0x00a6, 0x00a7, 0x00a8,
	0x00a9, 0x037a, 0x00ab, 0x00ac, 0x00ad, 0xd800, 0x2015, 0x00b0,
	0x00b1, 0x00b2, 0x00b3, 0x0384, 0x0385, 0x0386, 0x00b7, 0x0388,
	0x0389, 0x038a, 0x00bb, 0x038c, 0x00bd, 0x038e, 0x038f, 0x0390,
	0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398,
	0x0399, 0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f, 0x03a0,
	0x03a1, 0xd800, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7, 0x03a8,
	0x03a9, 0x03aa, 0x03ab, 0x03ac, 0x03ad, 0x03ae, 0x03af, 0x03b0,
	0x03b1, 0x03b2, 0x03b3, 0x03b4, 0x03b5, 0x03b6, 0x03b7, 0x03b8,
	0x03b9, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03be, 0x03bf, 0x03c0,
	0x03c1, 0x03c2, 0x03c3, 0x03c4, 0x03c5, 0x03c6, 0x03c7, 0x03c8,
	0x03c9, 0x03ca, 0x03cb, 0x03cc, 0x03cd, 0x03ce
};

static inline long conv_8859_7_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (b0 <= 0xa0) {
		*cp = b0;

		return 1;
	}

	if (0xa1 <= b0 && b0 <= 0xfe) {
		const uint16_t code =
			ISO_8859_7_000000A1_000000FE_TO_UNI_[b0 - 0xa1];

		/* illegal code for this range */
		if (code == 0xd800) {
			return -1;
		}

		*cp = code;

		return 1;
	}

	return -1;
}

static const uint8_t UNI_000000A3_000000BD_TO_ISO_8859_7_[] = {
	0xa3, 0x00, 0x00, 0xa6, 0xa7, 0xa8, 0xa9, 0x00,
	0xab, 0xac, 0xad, 0x00, 0x00, 0xb0, 0xb1, 0xb2,
	0xb3, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00,
	0xbb, 0x00, 0xbd
};

static const uint8_t UNI_0000037A_000003CE_TO_ISO_8859_7_[] = {
	0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xb4, 0xb5, 0xb6, 0x00, 0xb8, 0xb9,
	0xba, 0x00, 0xbc, 0x00, 0xbe, 0xbf, 0xc0, 0xc1,
	0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,
	0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1,
	0x00, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
	0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1,
	0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1,
	0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
	0xfa, 0xfb, 0xfc, 0xfd, 0xfe
};

static const uint8_t UNI_00002015_00002019_TO_ISO_8859_7_[] = {
	0xaf, 0x00, 0x00, 0xa1, 0xa2
};

static const uint8_t UNI_000020AC_000020AF_TO_ISO_8859_7_[] = {
	0xa4, 0x00, 0x00, 0xa5
};

static inline long conv_uni_to_8859_7_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (cp <= 0xa0) {
		*out = (uint8_t) cp;

		return 1;
	}

	if (0xa3 <= cp && cp <= 0xbd) {
		const uint8_t code =
			UNI_000000A3_000000BD_TO_ISO_8859_7_[cp - 0xa3];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x037a <= cp && cp <= 0x03ce) {
		const uint8_t code =
			UNI_0000037A_000003CE_TO_ISO_8859_7_[cp - 0x037a];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x2015 <= cp && cp <= 0x2019) {
		const uint8_t code =
			UNI_00002015_00002019_TO_ISO_8859_7_[cp - 0x2015];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x20ac <= cp && cp <= 0x20af) {
		const uint8_t code =
			UNI_000020AC_000020AF_TO_ISO_8859_7_[cp - 0x20ac];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_8859_7_H__ */
