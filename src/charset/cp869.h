#ifndef __NDM_SRC_CHARSET_CP869_H__
#define __NDM_SRC_CHARSET_CP869_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/VENDORS/MICSFT/PC/CP869.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t CP869_00000086_000000FF_TO_UNI_[] = {
	0x0386, 0xd800, 0x00b7, 0x00ac, 0x00a6, 0x2018, 0x2019, 0x0388,
	0x2015, 0x0389, 0x038a, 0x03aa, 0x038c, 0xd800, 0xd800, 0x038e,
	0x03ab, 0x00a9, 0x038f, 0x00b2, 0x00b3, 0x03ac, 0x00a3, 0x03ad,
	0x03ae, 0x03af, 0x03ca, 0x0390, 0x03cc, 0x03cd, 0x0391, 0x0392,
	0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x00bd, 0x0398, 0x0399,
	0x00ab, 0x00bb, 0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x039a,
	0x039b, 0x039c, 0x039d, 0x2563, 0x2551, 0x2557, 0x255d, 0x039e,
	0x039f, 0x2510, 0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c,
	0x03a0, 0x03a1, 0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550,
	0x256c, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7, 0x03a8, 0x03a9,
	0x03b1, 0x03b2, 0x03b3, 0x2518, 0x250c, 0x2588, 0x2584, 0x03b4,
	0x03b5, 0x2580, 0x03b6, 0x03b7, 0x03b8, 0x03b9, 0x03ba, 0x03bb,
	0x03bc, 0x03bd, 0x03be, 0x03bf, 0x03c0, 0x03c1, 0x03c3, 0x03c2,
	0x03c4, 0x0384, 0x00ad, 0x00b1, 0x03c5, 0x03c6, 0x03c7, 0x00a7,
	0x03c8, 0x0385, 0x00b0, 0x00a8, 0x03c9, 0x03cb, 0x03b0, 0x03ce,
	0x25a0, 0x00a0
};

static inline long conv_cp869_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (b0 <= 0x7f) {
		*cp = b0;

		return 1;
	}

	if (0x86 <= b0) {
		const uint16_t code =
			CP869_00000086_000000FF_TO_UNI_[b0 - 0x86];

		/* illegal code for this range */
		if (code == 0xd800) {
			return -1;
		}

		*cp = code;

		return 1;
	}

	return -1;
}

static const uint8_t UNI_000000A0_000000BD_TO_CP869_[] = {
	0xff, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x8a, 0xf5,
	0xf9, 0x97, 0x00, 0xae, 0x89, 0xf0, 0x00, 0x00,
	0xf8, 0xf1, 0x99, 0x9a, 0x00, 0x00, 0x00, 0x88,
	0x00, 0x00, 0x00, 0xaf, 0x00, 0xab
};

static const uint8_t UNI_00000384_000003CE_TO_CP869_[] = {
	0xef, 0xf7, 0x86, 0x00, 0x8d, 0x8f, 0x90, 0x00,
	0x92, 0x00, 0x95, 0x98, 0xa1, 0xa4, 0xa5, 0xa6,
	0xa7, 0xa8, 0xa9, 0xaa, 0xac, 0xad, 0xb5, 0xb6,
	0xb7, 0xb8, 0xbd, 0xbe, 0xc6, 0xc7, 0x00, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0x91, 0x96,
	0x9b, 0x9d, 0x9e, 0x9f, 0xfc, 0xd6, 0xd7, 0xd8,
	0xdd, 0xde, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5,
	0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xed, 0xec,
	0xee, 0xf2, 0xf3, 0xf4, 0xf6, 0xfa, 0xa0, 0xfb,
	0xa2, 0xa3, 0xfd
};

static const uint8_t UNI_00002015_00002019_TO_CP869_[] = {
	0x8e, 0x00, 0x00, 0x8b, 0x8c
};

static const uint8_t UNI_00002500_000025A0_TO_CP869_[] = {
	0xc4, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00,
	0xbf, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
	0xd9, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xcd, 0xba, 0x00, 0x00, 0xc9, 0x00, 0x00, 0xbb,
	0x00, 0x00, 0xc8, 0x00, 0x00, 0xbc, 0x00, 0x00,
	0xcc, 0x00, 0x00, 0xb9, 0x00, 0x00, 0xcb, 0x00,
	0x00, 0xca, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xdf, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00,
	0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xb0, 0xb1, 0xb2, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xfe
};

static inline long conv_uni_to_cp869_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (cp <= 0x7f) {
		*out = (uint8_t) cp;

		return 1;
	}

	if (0xa0 <= cp && cp <= 0xbd) {
		const uint8_t code =
			UNI_000000A0_000000BD_TO_CP869_[cp - 0xa0];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x0384 <= cp && cp <= 0x03ce) {
		const uint8_t code =
			UNI_00000384_000003CE_TO_CP869_[cp - 0x0384];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x2015 <= cp && cp <= 0x2019) {
		const uint8_t code =
			UNI_00002015_00002019_TO_CP869_[cp - 0x2015];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x2500 <= cp && cp <= 0x25a0) {
		const uint8_t code =
			UNI_00002500_000025A0_TO_CP869_[cp - 0x2500];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_CP869_H__ */
