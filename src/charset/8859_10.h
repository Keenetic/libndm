#ifndef __NDM_SRC_CHARSET_8859_10_H__
#define __NDM_SRC_CHARSET_8859_10_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/ISO8859/8859-10.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t ISO_8859_10_000000A1_000000FF_TO_UNI_[] = {
	0x0104, 0x0112, 0x0122, 0x012a, 0x0128, 0x0136, 0x00a7, 0x013b,
	0x0110, 0x0160, 0x0166, 0x017d, 0x00ad, 0x016a, 0x014a, 0x00b0,
	0x0105, 0x0113, 0x0123, 0x012b, 0x0129, 0x0137, 0x00b7, 0x013c,
	0x0111, 0x0161, 0x0167, 0x017e, 0x2015, 0x016b, 0x014b, 0x0100,
	0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x012e, 0x010c,
	0x00c9, 0x0118, 0x00cb, 0x0116, 0x00cd, 0x00ce, 0x00cf, 0x00d0,
	0x0145, 0x014c, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x0168, 0x00d8,
	0x0172, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df, 0x0101,
	0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x012f, 0x010d,
	0x00e9, 0x0119, 0x00eb, 0x0117, 0x00ed, 0x00ee, 0x00ef, 0x00f0,
	0x0146, 0x014d, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x0169, 0x00f8,
	0x0173, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x0138
};

static inline long conv_8859_10_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (b0 <= 0xa0) {
		*cp = b0;

		return 1;
	}

	if (0xa1 <= b0) {
		*cp =
			ISO_8859_10_000000A1_000000FF_TO_UNI_[b0 - 0xa1];

		return 1;
	}

	return -1;
}

static const uint8_t UNI_000000A7_0000017E_TO_ISO_8859_10_[] = {
	0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0x00,
	0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
	0x00, 0x00, 0xc9, 0x00, 0xcb, 0x00, 0xcd, 0xce,
	0xcf, 0xd0, 0x00, 0x00, 0xd3, 0xd4, 0xd5, 0xd6,
	0x00, 0xd8, 0x00, 0xda, 0xdb, 0xdc, 0xdd, 0xde,
	0xdf, 0x00, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
	0x00, 0x00, 0xe9, 0x00, 0xeb, 0x00, 0xed, 0xee,
	0xef, 0xf0, 0x00, 0x00, 0xf3, 0xf4, 0xf5, 0xf6,
	0x00, 0xf8, 0x00, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe,
	0x00, 0xc0, 0xe0, 0x00, 0x00, 0xa1, 0xb1, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xe8, 0x00,
	0x00, 0xa9, 0xb9, 0xa2, 0xb2, 0x00, 0x00, 0xcc,
	0xec, 0xca, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xa3, 0xb3, 0x00, 0x00, 0x00,
	0x00, 0xa5, 0xb5, 0xa4, 0xb4, 0x00, 0x00, 0xc7,
	0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6,
	0xb6, 0xff, 0x00, 0x00, 0xa8, 0xb8, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd1, 0xf1,
	0x00, 0x00, 0x00, 0xaf, 0xbf, 0xd2, 0xf2, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xaa, 0xba, 0x00, 0x00, 0x00, 0x00, 0xab,
	0xbb, 0xd7, 0xf7, 0xae, 0xbe, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xd9, 0xf9, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0xbc
};

static inline long conv_uni_to_8859_10_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (cp <= 0xa0) {
		*out = (uint8_t) cp;

		return 1;
	}

	if (0xa7 <= cp && cp <= 0x17e) {
		const uint8_t code =
			UNI_000000A7_0000017E_TO_ISO_8859_10_[cp - 0xa7];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (cp == 0x2015) {
		*out = 0xbd;

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_8859_10_H__ */
