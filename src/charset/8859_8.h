#ifndef __NDM_SRC_CHARSET_8859_8_H__
#define __NDM_SRC_CHARSET_8859_8_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/ISO8859/8859-8.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t ISO_8859_8_000000A2_000000FE_TO_UNI_[] = {
	0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7, 0x00a8, 0x00a9,
	0x00d7, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0, 0x00b1,
	0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9,
	0x00f7, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0xd800, 0xd800, 0xd800,
	0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800,
	0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800,
	0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800,
	0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0x2017, 0x05d0, 0x05d1,
	0x05d2, 0x05d3, 0x05d4, 0x05d5, 0x05d6, 0x05d7, 0x05d8, 0x05d9,
	0x05da, 0x05db, 0x05dc, 0x05dd, 0x05de, 0x05df, 0x05e0, 0x05e1,
	0x05e2, 0x05e3, 0x05e4, 0x05e5, 0x05e6, 0x05e7, 0x05e8, 0x05e9,
	0x05ea, 0xd800, 0xd800, 0x200e, 0x200f
};

static inline long conv_8859_8_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (b0 <= 0xa0) {
		*cp = b0;

		return 1;
	}

	if (0xa2 <= b0 && b0 <= 0xfe) {
		const uint16_t code =
			ISO_8859_8_000000A2_000000FE_TO_UNI_[b0 - 0xa2];

		/* illegal code for this range */
		if (code == 0xd800) {
			return -1;
		}

		*cp = code;

		return 1;
	}

	return -1;
}

static const uint8_t UNI_000000A2_000000F7_TO_ISO_8859_8_[] = {
	0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9,
	0x00, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
	0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9,
	0x00, 0xbb, 0xbc, 0xbd, 0xbe, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xba
};

static const uint8_t UNI_000005D0_000005EA_TO_ISO_8859_8_[] = {
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0xfa
};

static const uint8_t UNI_0000200E_00002017_TO_ISO_8859_8_[] = {
	0xfd, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xdf
};

static inline long conv_uni_to_8859_8_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (cp <= 0xa0) {
		*out = (uint8_t) cp;

		return 1;
	}

	if (0xa2 <= cp && cp <= 0xf7) {
		const uint8_t code =
			UNI_000000A2_000000F7_TO_ISO_8859_8_[cp - 0xa2];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x05d0 <= cp && cp <= 0x05ea) {
		*out =
			UNI_000005D0_000005EA_TO_ISO_8859_8_[cp - 0x05d0];

		return 1;
	}

	if (0x200e <= cp && cp <= 0x2017) {
		const uint8_t code =
			UNI_0000200E_00002017_TO_ISO_8859_8_[cp - 0x200e];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_8859_8_H__ */
