#ifndef __NDM_SRC_CHARSET_8859_3_H__
#define __NDM_SRC_CHARSET_8859_3_H__

/**
 * Automatically generated by @c convgen
 * from @c ./MAPPINGS/ISO8859/8859-3.TXT
 * Range merge code gap is 128.
 * See http://www.unicode.org/Public/MAPPINGS/ for
 * other charsets.
 **/

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

static const uint16_t ISO_8859_3_000000A1_000000FF_TO_UNI_[] = {
	0x0126, 0x02d8, 0x00a3, 0x00a4, 0xd800, 0x0124, 0x00a7, 0x00a8,
	0x0130, 0x015e, 0x011e, 0x0134, 0x00ad, 0xd800, 0x017b, 0x00b0,
	0x0127, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x0125, 0x00b7, 0x00b8,
	0x0131, 0x015f, 0x011f, 0x0135, 0x00bd, 0xd800, 0x017c, 0x00c0,
	0x00c1, 0x00c2, 0xd800, 0x00c4, 0x010a, 0x0108, 0x00c7, 0x00c8,
	0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf, 0xd800,
	0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x0120, 0x00d6, 0x00d7, 0x011c,
	0x00d9, 0x00da, 0x00db, 0x00dc, 0x016c, 0x015c, 0x00df, 0x00e0,
	0x00e1, 0x00e2, 0xd800, 0x00e4, 0x010b, 0x0109, 0x00e7, 0x00e8,
	0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef, 0xd800,
	0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x0121, 0x00f6, 0x00f7, 0x011d,
	0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x016d, 0x015d, 0x02d9
};

static inline long conv_8859_3_to_uni_(
		const uint8_t *const in,
		const size_t in_bytes,
		uint32_t *cp)
{
	assert (in_bytes > 0);

	const uint8_t b0 = *in;

	if (b0 <= 0xa0) {
		*cp = b0;

		return 1;
	}

	if (0xa1 <= b0) {
		const uint16_t code =
			ISO_8859_3_000000A1_000000FF_TO_UNI_[b0 - 0xa1];

		/* illegal code for this range */
		if (code == 0xd800) {
			return -1;
		}

		*cp = code;

		return 1;
	}

	return -1;
}

static const uint8_t UNI_000000A3_0000017C_TO_ISO_8859_3_[] = {
	0xa3, 0xa4, 0x00, 0x00, 0xa7, 0xa8, 0x00, 0x00,
	0x00, 0x00, 0xad, 0x00, 0x00, 0xb0, 0x00, 0xb2,
	0xb3, 0xb4, 0xb5, 0x00, 0xb7, 0xb8, 0x00, 0x00,
	0x00, 0x00, 0xbd, 0x00, 0x00, 0xc0, 0xc1, 0xc2,
	0x00, 0xc4, 0x00, 0x00, 0xc7, 0xc8, 0xc9, 0xca,
	0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0x00, 0xd1, 0xd2,
	0xd3, 0xd4, 0x00, 0xd6, 0xd7, 0x00, 0xd9, 0xda,
	0xdb, 0xdc, 0x00, 0x00, 0xdf, 0xe0, 0xe1, 0xe2,
	0x00, 0xe4, 0x00, 0x00, 0xe7, 0xe8, 0xe9, 0xea,
	0xeb, 0xec, 0xed, 0xee, 0xef, 0x00, 0xf1, 0xf2,
	0xf3, 0xf4, 0x00, 0xf6, 0xf7, 0x00, 0xf9, 0xfa,
	0xfb, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xc5,
	0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xd8, 0xf8, 0xab, 0xbb, 0xd5, 0xf5, 0x00,
	0x00, 0xa6, 0xb6, 0xa1, 0xb1, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xb9, 0x00,
	0x00, 0xac, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xde, 0xfe, 0xaa, 0xba, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xdd, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xaf, 0xbf
};

static const uint8_t UNI_000002D8_000002D9_TO_ISO_8859_3_[] = {
	0xa2, 0xff
};

static inline long conv_uni_to_8859_3_(
		uint32_t cp,
		uint8_t *out,
		const size_t out_bytes)
{
	if (out_bytes == 0) {
		return -1;
	}

	if (cp <= 0xa0) {
		*out = (uint8_t) cp;

		return 1;
	}

	if (0xa3 <= cp && cp <= 0x17c) {
		const uint8_t code =
			UNI_000000A3_0000017C_TO_ISO_8859_3_[cp - 0xa3];

		/* illegal code for this range */
		if (code == 0x00) {
			return 0;
		}

		*out = code;

		return 1;
	}

	if (0x02d8 <= cp && cp <= 0x02d9) {
		*out =
			UNI_000002D8_000002D9_TO_ISO_8859_3_[cp - 0x02d8];

		return 1;
	}

	return 0;
}

#endif /* __NDM_SRC_CHARSET_8859_3_H__ */
